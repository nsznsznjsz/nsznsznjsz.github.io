import{r as l,o as n,c as a,a as e,F as r,b as u}from"./app.cad05c30.js";const i={},s=e("h1",{id:"平衡二叉树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#平衡二叉树","aria-hidden":"true"},"#"),u(" 平衡二叉树")],-1),t=e("p",null,"平衡二叉查找树，简称：平衡二叉树，由前苏联的数学家 Adelse-Velskil 和 Landis 在1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为AVL 树。指的是所有节点平衡因子的绝对值不大于1的二叉树叫做平衡二叉树。",-1),d=u("你可以通过 "),o={href:"https://www.cs.usfca.edu/~galles/visualization/AVLtree.html",target:"_blank",rel:"noopener noreferrer"},h=u("AVL Tree Visualzation"),c=u(" 来模拟AVL树的各个操作。"),p=e("blockquote",null,[e("p",null,"平衡因子：左子树高减去右子树高")],-1),L=e("blockquote",null,[e("p",null,"平衡二叉树并不一定是一个完全二叉树，例如高度为4且非叶子节点平衡因子均为1的AVL树"),e("p",null,[e("img",{src:"/assets/avl-tree.19b8ba6c.png",alt:"image-20210115121840387"})]),e("p",null,"由上图我们还可以发现，高度为4的AVL树最少有7个节点，最多有15个节点")],-1),b=e("h2",{id:"插入",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#插入","aria-hidden":"true"},"#"),u(" 插入")],-1),g=e("p",null,"插入操作与二叉排序树相似，但插入后可能引起[失衡][#失衡]。",-1),f=e("ol",null,[e("li",null,"通过排序规则选择合适的插入位置"),e("li",null,"创建一新的叶子节点，插入该位置"),e("li",null,"向上更新路径上每个节点的平衡因子，当平衡因子的绝对值大于1时引起失衡，先进行平衡操作"),e("li",null,"重复步骤3，直到达到根节点")],-1),V=e("h2",{id:"删除",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#删除","aria-hidden":"true"},"#"),u(" 删除")],-1),A=e("p",null,"插入操作与二叉排序树相似，但插入后可能引起[失衡][#失衡]。",-1),m=e("ol",null,[e("li",null,"通过查找规则找到删除节点，找不到则结束，如果为只有一个节点的树的根节点，则删除根节点后结束"),e("li",null,"找到删除节点在中序遍历中的前驱节点或后继节点（必为叶子节点）"),e("li",null,"交换两节点，删除叶子节点"),e("li",null,"向上更新路径上每个节点的平衡因子，当平衡因子的绝对值大于1时引起失衡，先进行平衡操作"),e("li",null,"重复步骤4，直到达到根节点")],-1),x=e("h2",{id:"查找",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#查找","aria-hidden":"true"},"#"),u(" 查找")],-1),k=e("p",null,[u("查找操作与二叉排序树相同，因为AVL树总是平衡的，所以耗费O(log "),e("em",null,"n"),u(")时间。AVL树不会因查找过程而改变。")],-1),R=e("h2",{id:"失衡",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#失衡","aria-hidden":"true"},"#"),u(" 失衡")],-1),v=e("ul",null,[e("li",null,[e("strong",null,"LL"),u("：对失衡节点顺时针旋转")]),e("li",null,[e("strong",null,"LR"),u("：对失衡节点左孩子节点逆时针旋转，对失衡节点顺时针旋转")]),e("li",null,[e("strong",null,"RR"),u("：对失衡节点逆时针旋转")]),e("li",null,[e("strong",null,"RL"),u("：对失衡节点左孩子节点顺时针旋转，对失衡节点逆时针旋转")])],-1),w=e("p",null,[e("img",{src:"/assets/avl-tree-rebalancing.f8eaa785.png",alt:"AVL Tree Rebalancing"})],-1);i.render=function(u,i){const q=l("OutboundLink");return n(),a(r,null,[s,t,e("p",null,[d,e("a",o,[h,e(q)]),c]),p,L,b,g,f,V,A,m,x,k,R,v,w],64)};export default i;
