import{r as n,o as e,c as a,a as s,F as r,b as i,d as l}from"./app.cad05c30.js";const t={},p=s("h1",{id:"typescript-基本语法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#typescript-基本语法","aria-hidden":"true"},"#"),i(" Typescript 基本语法")],-1),c={href:"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md",target:"_blank",rel:"noopener noreferrer"},u=i("TypeScript Language Specification"),b=l('<h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> Type</h2><h3 id="enum" tabindex="-1"><a class="header-anchor" href="#enum" aria-hidden="true">#</a> Enum</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>enum Tristate {\n  False,\n  True = 2,\n  Unknown,\n}\n\nconst lie = Tristate.False\n\n// compiled, 生成一个全局变量\nvar Tristate\n;(function (Tristate) {\n  Tristate[(Tristate[&quot;False&quot;] = 0)] = &quot;False&quot;\n  Tristate[(Tristate[&quot;True&quot;] = 2)] = &quot;True&quot;\n  Tristate[(Tristate[&quot;Unknown&quot;] = 3)] = &quot;Unknown&quot;\n})(Tristate || (Tristate = {}))\n\nvar lie = Tristate.False\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><strong>const enum :</strong> 编译后不包含全局变量, 而是直接替换为值, 减少寻址过程 <code>var lie = 0</code>, 可以添加编译选项<code>--preserveConstEnums</code>生成全局变量</p><h3 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h3><ul><li>不以 I 开头, 因为并不仅仅是接口</li><li>Duck typing</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Point {\n  x: number\n  y: number\n}\n\nclass MyPoint implements Point {\n  x: number\n  y: number // Same as Point\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>interface Crazy {\n  new (): {\n    hello: number\n  }\n}\n\nclass CrazyClass implements Crazy {\n  constructor() {\n    return { hello: 123 }\n  }\n}\n\n// Because\nconst crazy = new CrazyClass() // crazy would be { hello:123 }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="type-alias" tabindex="-1"><a class="header-anchor" href="#type-alias" aria-hidden="true">#</a> Type Alias</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type Shape = Square | Rectangle\ntype Pet = Cat &amp; Dog\n\ntype Point = {\n  x: number\n  y: number\n}\n\ntype Pointable = {\n  (): Point\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="inference-and-type-alias" tabindex="-1"><a class="header-anchor" href="#inference-and-type-alias" aria-hidden="true">#</a> Inference and Type Alias</h3><h3 id="相同" tabindex="-1"><a class="header-anchor" href="#相同" aria-hidden="true">#</a> 相同</h3><ul><li>extends / union</li><li>implements</li></ul><h3 id="不同" tabindex="-1"><a class="header-anchor" href="#不同" aria-hidden="true">#</a> 不同</h3><ul><li>type <ul><li>alias</li><li>union <ul><li>interface cannot extends union type</li><li>class cannot implements union type</li></ul></li><li>&amp;</li><li>typeof</li></ul></li><li>interface <ul><li>extends</li><li>declaration merging <ul><li>公开 API 必须使用 interface</li></ul></li></ul></li></ul><h2 id="类型操作关键词" tabindex="-1"><a class="header-anchor" href="#类型操作关键词" aria-hidden="true">#</a> 类型操作关键词</h2><ul><li>!</li><li>?</li><li>readonly</li><li>keyof</li><li>typeof</li><li>in</li><li>infer</li><li>extends</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>type Words = &quot;a&quot; | &quot;b&quot; | &quot;c&quot;\ntype W&lt;T&gt; = T extends Words ? true : false\ntype WA = W&lt;&quot;a&quot;&gt; // -&gt; true\ntype WD = W&lt;&quot;d&quot;&gt; // -&gt; false\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><h3 id="base-usage" tabindex="-1"><a class="header-anchor" href="#base-usage" aria-hidden="true">#</a> base usage</h3><ul><li><code>function&lt;T&gt;: T {}</code></li><li><code>&lt;T&gt;(input: T) =&gt; void</code></li><li><code>interface&lt;T&gt; {}</code></li><li><code>type&lt;T&gt; = T | { [key: string] : string }</code></li></ul><h3 id="infer" tabindex="-1"><a class="header-anchor" href="#infer" aria-hidden="true">#</a> infer</h3><h3 id="内置操作类型" tabindex="-1"><a class="header-anchor" href="#内置操作类型" aria-hidden="true">#</a> 内置操作类型</h3>',23),d={href:"https://juejin.im/post/5c2f87ce5188252593122c98",target:"_blank",rel:"noopener noreferrer"},o=i("TypeScript 强大的类型别名"),h=l('<h2 id="tsconfig-json" tabindex="-1"><a class="header-anchor" href="#tsconfig-json" aria-hidden="true">#</a> tsconfig.json</h2><h2 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> @types</h2><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><ul><li>minfication #8</li></ul>',4);t.render=function(i,l){const t=n("OutboundLink");return e(),a(r,null,[p,s("p",null,[s("a",c,[u,s(t)])]),b,s("p",null,[s("a",d,[o,s(t)])]),h],64)};export default t;
