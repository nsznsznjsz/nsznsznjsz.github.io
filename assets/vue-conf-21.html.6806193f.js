import{r as l,o as e,c as n,a,F as u,b as r}from"./app.cad05c30.js";const s={},i=a("h1",{id:"vue-conf-21",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#vue-conf-21","aria-hidden":"true"},"#"),r(" Vue Conf 21")],-1),c=a("h2",{id:"vite",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#vite","aria-hidden":"true"},"#"),r(" Vite")],-1),d=a("h3",{id:"为什么更快",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#为什么更快","aria-hidden":"true"},"#"),r(" 为什么更快？")],-1),t=a("p",null,[r("Vite 快速的核心原因时改变了原有的 Bundler-Based Dev Server，而采用 ESM-Based Dev Server 方案。Bundle-Base 的方案中，"),a("strong",null,"Full Bundler"),r(" 决定了开发服务器的每次启动都十分低效，需要从入口文件解析整个依赖树并将其打包。而全新的 ESM-Based 开发服务器只需要做每个文件的 "),a("strong",null,"Transform"),r("，文件依赖解析则交由 ESM 完成，如此一来，开发服务器真的就只需要监听一个端口那么简单！")],-1),o=a("blockquote",null,[a("p",null,"其实可能还有依赖预编译，当然这也是为了更快")],-1),p=a("h3",{id:"ssr-目标",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#ssr-目标","aria-hidden":"true"},"#"),r(" SSR 目标")],-1),b=a("ul",null,[a("li",null,"Dev Bundless"),a("li",null,[r("Node 环境下加载 ESM "),a("ul",null,[a("li",null,"兼容 Node 低版本"),a("li",null,"兼容生态环境")])]),a("li",null,"支持 HMR+Plugin")],-1),h=a("h2",{id:"编译优化思路",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#编译优化思路","aria-hidden":"true"},"#"),r(" 编译优化思路")],-1),m=a("div",{class:"language-typescript ext-ts line-numbers-mode"},[a("pre",{class:"language-typescript"},[a("code",null,"return {\n  c() {\n    /* create  */\n  },\n  m() {\n    /* mount   */\n  },\n  p() {\n    /* patch   */\n  },\n  d() {\n    /* destory */\n  },\n}\n\n// @vue/reactive\nreturn {\n  c() {\n    /* create  */\n  },\n  m() {\n    /* mount   */\n  },\n  d() {\n    /* destory */\n  },\n}\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br"),a("span",{class:"line-number"},"5"),a("br"),a("span",{class:"line-number"},"6"),a("br"),a("span",{class:"line-number"},"7"),a("br"),a("span",{class:"line-number"},"8"),a("br"),a("span",{class:"line-number"},"9"),a("br"),a("span",{class:"line-number"},"10"),a("br"),a("span",{class:"line-number"},"11"),a("br"),a("span",{class:"line-number"},"12"),a("br"),a("span",{class:"line-number"},"13"),a("br"),a("span",{class:"line-number"},"14"),a("br"),a("span",{class:"line-number"},"15"),a("br"),a("span",{class:"line-number"},"16"),a("br"),a("span",{class:"line-number"},"17"),a("br"),a("span",{class:"line-number"},"18"),a("br"),a("span",{class:"line-number"},"19"),a("br"),a("span",{class:"line-number"},"20"),a("br"),a("span",{class:"line-number"},"21"),a("br"),a("span",{class:"line-number"},"22"),a("br"),a("span",{class:"line-number"},"23"),a("br"),a("span",{class:"line-number"},"24"),a("br"),a("span",{class:"line-number"},"25"),a("br"),a("span",{class:"line-number"},"26"),a("br"),a("span",{class:"line-number"},"27"),a("br")])],-1),f=a("h2",{id:"element3",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#element3","aria-hidden":"true"},"#"),r(" Element3")],-1),x=a("ul",null,[a("li",null,"Headless/Styled"),a("li",null,"webGL -> 材质")],-1),v=a("h2",{id:"新一代构建工具",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#新一代构建工具","aria-hidden":"true"},"#"),r(" 新一代构建工具")],-1),g=a("blockquote",null,[a("p",null,"别让构建流程成为技术包袱")],-1),y=a("p",null,[a("img",{src:"/assets/the-next-builder.09ec4490.png",alt:"The Next Builder"})],-1),S=a("h3",{id:"type-first",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#type-first","aria-hidden":"true"},"#"),r(" Type First")],-1),R=a("p",null,"Type First, 类型优先 -> Typescript",-1),V=a("ul",null,[a("li",null,"类型提示"),a("li",null,"智能补全"),a("li",null,"省下写文档的时间"),a("li",null,"方便重构")],-1),k=a("h3",{id:"将类型检查放到编译外",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#将类型检查放到编译外","aria-hidden":"true"},"#"),r(" 将类型检查放到编译外")],-1),T=a("ul",null,[a("li",null,"esbuild: 单纯的 Typescript 词法扩展并不会让编译变慢"),a("li",null,"把 tsc 作为 lint 的一部分")],-1),E=a("h3",{id:"be-explicit",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#be-explicit","aria-hidden":"true"},"#"),r(" Be Explicit")],-1),w=a("ul",null,[a("li",null,[a("p",null,"用 define* 的帮助函数：类型补全")]),a("li",null,[a("p",null,"不要省略文件名：类型")])],-1),B=a("h3",{id:"module-by-default",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#module-by-default","aria-hidden":"true"},"#"),r(" Module By Default")],-1),j=a("ul",null,[a("li",null,[a("p",null,"拥抱 ES Module")]),a("li",null,[a("p",null,"重新看待 Externals，在 ESM 时代，简单的 Externals 并不好用"),a("ul",null,[a("li",null,"alias"),a("li",null,"import maps")])]),a("li",null,[a("p",null,[a("code",null,"__filename"),r(" / "),a("code",null,"__dirname"),r(" / "),a("code",null,"require.resolve"),r(" => "),a("code",null,[r("i"),a("wbr"),r("mport.meta.url")])])]),a("li",null,[a("p",null,[a("code",null,[r("p"),a("wbr"),r("rocess.env")]),r(" => "),a("code",null,[r("i"),a("wbr"),r("mport.meta.env")])]),a("ul",null,[a("li",null,"来自 Node.js，环境并不存在"),a("li",null,[r("浏览器端的 "),a("code",null,[r("p"),a("wbr"),r("rocess.env")]),r(" 并不是环境，而是配置")]),a("li",null,[a("code",null,"NODE_ENV"),r("有各种约定俗称的用法")])])]),a("li",null,[a("p",null,"JSON modules => 标准只有 default import")])],-1),N=a("h3",{id:"构建工具的兼容难题",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#构建工具的兼容难题","aria-hidden":"true"},"#"),r(" 构建工具的兼容难题")],-1),M=a("p",null,"浏览器兼容 & 技术债务",-1),F=a("ul",null,[a("li",null,"IE 11 => Retail"),a("li",null,"Dynamic Import"),a("li",null,"Node.js Polyfills & Shims")],-1),J=a("h2",{id:"减少-node-依赖",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#减少-node-依赖","aria-hidden":"true"},"#"),r(" 减少 Node 依赖")],-1),D=a("p",null,"抹平差距",-1),P=a("ul",null,[a("li",null,"Define：简单的字符串替换"),a("li",null,"Mock / Sham：无实际功能的模拟，如 fs"),a("li",null,"Shim / Polyfill：模拟完整功能，如 path")],-1),X=a("p",null,"用 globalThis 代替 global/window",-1),I=a("h2",{id:"jsx",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jsx","aria-hidden":"true"},"#"),r(" JSX")],-1),_=a("p",null,[a("img",{src:"/assets/from-template-to-render-function.7c53f8b1.png",alt:"From Template to Render Function"})],-1),C=a("p",null,"利用 Babel 赋予的编译能力，实现模板与 JSX 跨语言联动，以用户的需求为抓手，摸索出一套适用于 Vue 的 JSX 方法论，打造 Vue 生态闭环，利用 TypeScript 的类型提示，为更习惯于 JSX 的开发者赋能。",-1),H=a("h3",{id:"什么是-真正的-jsx",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#什么是-真正的-jsx","aria-hidden":"true"},"#"),r(" 什么是“真正的”JSX")],-1),q=a("p",null,'JSX 最早由 Facebook 起草，用于 React，但不是 tc39 的规范，因此浏览器不会直接实现。JSX 需要由编译器和框架来"赋能"，以下列代码为例：',-1),A=a("div",{class:"language-jsx ext-jsx line-numbers-mode"},[a("pre",{class:"language-jsx"},[a("code",null,"<h1>Hello, world!</h1>\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br")])],-1),K=a("p",null,"经过编译后（通过 Babel, ts 等工具转换 AST）：",-1),L=a("div",{class:"language-typescript ext-ts line-numbers-mode"},[a("pre",{class:"language-typescript"},[a("code",null,'import { createVNode as _createVNode } from "vue"\n_createVNode("h1", null, "Hello, world!")\n')]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br")])],-1),O=a("h3",{id:"缺点",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#缺点","aria-hidden":"true"},"#"),r(" 缺点")],-1),G=a("ol",null,[a("li",null,[a("p",null,[a("strong",null,"额外的运行时"),r("：JSX 无法判断 slot 或 children，只能在运行时判断")])]),a("li",null,[a("p",null,[a("strong",null,"信息不足"),r("：JSX 语法自由的代价就是难以实现静态分析，编译信息较少，Vue3 引入的"),a("code",null,"PatchFlags"),r("无法完全做到，导致 JSX 编译后的 "),a("code",null,"Render Function"),r(" 性能差一些")])])],-1),W=a("h2",{id:"composition-api",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#composition-api","aria-hidden":"true"},"#"),r(" Composition API")],-1),$=r("PPT: "),z={href:"https://talks.antfu.me/2021/vueconf-china",target:"_blank",rel:"noopener noreferrer"},Q=r("https://talks.antfu.me/2021/vueconf-china"),U=a("h3",{id:"为什么要组合式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#为什么要组合式","aria-hidden":"true"},"#"),r(" 为什么要组合式？")],-1),Y=a("ul",null,[a("li",null,[a("p",null,"对象式变量来源不明确")]),a("li",null,[a("p",null,"Type 补全复杂")])],-1),Z=a("h3",{id:"什么是组合式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#什么是组合式","aria-hidden":"true"},"#"),r(" 什么是组合式？")],-1),ll=a("ul",null,[a("li",null,[a("p",null,"可复用逻辑的组合，其中每个函数都可以独立使用")]),a("li",null,[a("p",null,"专注点分离")])],-1),el=a("p",null,[a("img",{src:"/assets/composable-dependency-graph.dda80e69.png",alt:"Composable Dependency Graph"})],-1),nl=a("h3",{id:"reactive",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#reactive","aria-hidden":"true"},"#"),r(" Reactive")],-1),al=a("p",null,[r("不同于 React，Vue 的 "),a("code",null,"Setup()"),r(" 只会在组件建立时执行一次，在此期间会建立起数据与逻辑之间的连结。")],-1),ul=a("ul",null,[a("li",null,"建立输入 → 输出的连结"),a("li",null,"输出会根据输入的改变而改变（就像你的 Excel 一样 🎉）")],-1),rl=a("p",null,[a("img",{src:"/assets/reactive-like-excel.809cd4da.png",alt:"Reactive Like Excel"})],-1),sl=a("h3",{id:"best-practices",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#best-practices","aria-hidden":"true"},"#"),r(" Best practices")],-1),il=a("ul",null,[a("li",null,[a("p",null,[r("优先使用 "),a("code",null,"ref"),r(" 而不是 "),a("code",null,"reactive")]),a("ul",null,[a("li",null,[a("p",null,"显示调用，类型检查")]),a("li",null,[a("p",null,[r("相比 Reactive 局限更少："),a("code",null,"reactive "),r("有类型，无法解构……")])])])]),a("li",null,[a("p",null,"Ref 自动解包"),a("ul",null,[a("li",null,[a("p",null,[a("code",null,"watch"),r(" 直接接收 Ref ，回调中会自动解包")])]),a("li",null,[a("p",null,"Ref 在模板中自动解包")]),a("li",null,[a("p",null,[r("使用 "),a("code",null,"reactive"),r(" 解包嵌套 "),a("code",null,"ref"),r("，用来代替 "),a("code",null,"toRef")])])])]),a("li",null,[a("p",null,[a("code",null,"unref"),r(" API")]),a("ul",null,[a("li",null,[a("p",null,[a("code",null,"unref(a) => isRef(a) ? a.value : a")])]),a("li",null,[a("p",null,[r("接收 Ref 作为函数参数 "),a("code",null,"(a, b) => unref(a) + unref(b)")])])])]),a("li",null,[a("p",null,[a("code",null,"type MaybeRef<T> = Ref<T> | T ")])]),a("li",null,[a("p",null,[r("重复使用 ref，"),a("code",null,"ref "),r("会自动解包的！")]),a("ul",null,[a("li",null,[a("code",null,"newRef = isRef(foo) ? foo : ref(foo)"),r("和"),a("code",null,"newRef = ref(foo)"),r(" 一样的")])])]),a("li",null,[a("p",null,"副作用自动清除"),a("ul",null,[a("li",null,[a("p",null,[r("组件内的 "),a("code",null,"watch"),r(" 和 "),a("code",null,"computed"),r(" 会在销毁时自动清除")])]),a("li",null,[a("p",null,[r("Vue 3.2: "),a("code",null,"effectScope")])])])]),a("li",null,[a("p",null,[r("类型安全的 "),a("code",null,"Provide"),r("/"),a("code",null,"Inject"),r("："),a("code",null,"InjectionKey<T>")])]),a("li",null,[a("p",null,"状态共享"),a("ul",null,[a("li",null,[a("p",null,"直接用 Composition API 把状态抽离")]),a("li",null,[a("p",null,[r("使用 "),a("code",null,"provide"),r("/"),a("code",null,"inject"),r(" 来共享应用层面的状态")])])])]),a("li",null,[a("p",null,[r("小技巧："),a("code",null,"useVModel")])])],-1),cl=a("div",{class:"language-typescript ext-ts line-numbers-mode"},[a("pre",{class:"language-typescript"},[a("code",null,"export function useVModel(props, name) {\n  const emit = getCurrentInstance.emit\n  return computed({\n    get() {\n      return props[name]\n    },\n    set(v) {\n      emit(`update${name}`, v)\n    },\n  })\n}\n")]),a("div",{class:"line-numbers"},[a("span",{class:"line-number"},"1"),a("br"),a("span",{class:"line-number"},"2"),a("br"),a("span",{class:"line-number"},"3"),a("br"),a("span",{class:"line-number"},"4"),a("br"),a("span",{class:"line-number"},"5"),a("br"),a("span",{class:"line-number"},"6"),a("br"),a("span",{class:"line-number"},"7"),a("br"),a("span",{class:"line-number"},"8"),a("br"),a("span",{class:"line-number"},"9"),a("br"),a("span",{class:"line-number"},"10"),a("br"),a("span",{class:"line-number"},"11"),a("br")])],-1),dl=a("ul",null,[a("li",null,"Vue Demi: 一套代码，同时适用 Vue 2 和 Vue 3")],-1),tl=a("h2",{id:"vue-的-flutter-实践",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#vue-的-flutter-实践","aria-hidden":"true"},"#"),r(" Vue 的 Flutter 实践")],-1),ol=a("ul",null,[a("li",null,"移动端技术栈演变：WebView -> Hybrid -> RN -> Flutter")],-1),pl=a("p",null,[a("img",{src:"/assets/kraken-intro.d248cc26.png",alt:"Kraken Intro"})],-1),bl=a("p",null,[a("img",{src:"/assets/kraken-diff-tech.a58e0615.png",alt:"Kraken Diff Tech"})],-1);s.render=function(r,s){const hl=l("OutboundLink");return e(),n(u,null,[i,c,d,t,o,p,b,h,m,f,x,v,g,y,S,R,V,k,T,E,w,B,j,N,M,F,J,D,P,X,I,_,C,H,q,A,K,L,O,G,W,a("blockquote",null,[a("p",null,[$,a("a",z,[Q,a(hl)])])]),U,Y,Z,ll,el,nl,al,ul,rl,sl,il,cl,dl,tl,ol,pl,bl],64)};export default s;
