import{o as s,c as a,F as l,a as n,b as t,d as e}from"./app.cad05c30.js";const i={},m=n("h1",{id:"树和森林",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树和森林","aria-hidden":"true"},"#"),t(" 树和森林")],-1),p=n("h2",{id:"树-tree",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树-tree","aria-hidden":"true"},"#"),t(" 树（Tree）")],-1),r=n("p",null,"树是 n (n>=0) 个结点的有限集合 T. 当 n=0 时，称为空树; 当 n>0 时，集合满足下列条件:",-1),c=n("ol",null,[n("li",null,"有且仅有一个特定的称为根（root）的结点，它没有直接前驱，但有零个或多个直接后继"),n("li",null,[t("当 n>1 时，其余结点可分为 m（m>0）个互不相交的有限集 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"T"),n("mn",null,"1")]),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"T"),n("mn",null,"2")]),n("mo",{separator:"true"},","),n("mo",null,"…"),n("msub",null,[n("mi",null,"T"),n("mi",null,"m")])]),n("annotation",{encoding:"application/x-tex"},"T_1, T_2, \\ldots T_m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.151392em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"m")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t("，其中每一个集合本身又是一棵树，并且称为根的子树")])],-1),h=n("p",null,"将树视为特殊的无向图，有：图的出度等于入度；又树中除根结点外，入度均为 1，故有：",-1),g=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"n"),n("mn",null,"1")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"+"),n("mo",null,"…"),n("mo",null,"+"),n("msub",null,[n("mi",null,"n"),n("mi",null,"k")]),n("mo",null,"="),n("mn",null,"0"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",null,"+"),n("mn",null,"1"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"1")]),n("mo",null,"+"),n("mn",null,"2"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"+"),n("mo",null,"…"),n("mo",null,"+"),n("mi",null,"k"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mi",null,"k")]),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n_0 + n_1 + n_2 + \\ldots + n_k = 0 * n_0 + 1 * n_1 + 2 * n_2 + \\ldots + k * n_k + 1 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.33610799999999996em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"0"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.66666em","vertical-align":"-0.08333em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.69444em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.33610799999999996em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])])],-1),u=n("p",null,[t("其中 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"n_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.31166399999999994em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t(" 表示度数为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.65952em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal"},"i")])])])]),t(" 的结点。")],-1),o=n("p",null,[n("strong",null,"二叉树（Binary Tree）"),t("：度不大于 2 的有序树（左右节点有序）")],-1),d=n("p",null,[n("strong",null,"满二叉树"),t("：深度为 k 且有 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"k")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^k-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.932438em","vertical-align":"-0.08333em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.849108em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])]),t(" 个结点的二叉树")],-1),b=n("p",null,[n("strong",null,"完全二叉树"),t("：深度为 k，结点数为 n 的二叉树，当且仅当其 1 ~ n 都与深度为 k 的满二叉树中编号从 1 ~ n 的结点一一对应时，则称之为完全二叉树")],-1),y=n("h3",{id:"性质",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#性质","aria-hidden":"true"},"#"),t(" 性质")],-1),v=n("p",null,[n("strong",null,"性质一"),t("：二叉树第 i 层上至多有 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"i"),n("mo",null,"−"),n("mn",null,"1")])])]),n("annotation",{encoding:"application/x-tex"},"2^{i-1}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.824664em","vertical-align":"0em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.824664em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"i"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])])])])])])])])])]),t(" 个结点")],-1),x=n("p",null,[n("strong",null,"性质二"),t("：深度为 k 的二叉树至多有 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"k")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^k-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.932438em","vertical-align":"-0.08333em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.849108em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])]),t(" 个结点")],-1),w=n("p",null,[n("strong",null,"性质三"),t("：对任一二叉树 T，若"),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mi",null,"i")])]),n("annotation",{encoding:"application/x-tex"},"n_i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.31166399999999994em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"i")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t("表示度为"),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.65952em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal"},"i")])])])]),t("的结点，则有：")],-1),k=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"n"),n("mn",null,"1")]),n("mo",null,"+"),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"="),n("mn",null,"0"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",null,"+"),n("mn",null,"1"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"+"),n("mn",null,"2"),n("mo",null,"∗"),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n_0 + n_1 + n_2 = 0 * n_0 + 1 * n_2 + 2 * n_2 + 1 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"0"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])])],-1),f=n("p",null,"左右消去相同项，化简得：",-1),z=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"n"),n("mn",null,"0")]),n("mo",null,"="),n("msub",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"n_0=n_2+1 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.58056em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.73333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"0em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])])],-1),M=n("p",null,"即叶结点个数为二分支节点个数加一。",-1),T=n("p",null,[n("strong",null,"性质四"),t("：具有 n 个结点的"),n("strong",null,"完全二叉树"),t("的深度为"),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"o"),n("mi",null,"r"),n("mo",{stretchy:"false"},"("),n("mi",null,"l"),n("mi",null,"o"),n("msub",null,[n("mi",null,"g"),n("mn",null,"2")]),n("mi",null,"n"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"floor(log_2n)+1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"oor"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])])],-1),L=n("p",null,[n("strong",null,"性质五"),t("：具有 n 个结点的"),n("strong",null,"完全二叉树"),t("，按照从上到下，从左到右编号，对任意序号 i 的结点有:")],-1),_=n("ol",null,[n("li",null,[t("如 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"i"),n("mo",null,"="),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"i=1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.65952em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])]),t("，则该结点为根结点，无父结点; 如 i>1，则"),n("strong",null,[t("父结点编号为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"o"),n("mi",null,"r"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"/"),n("mn",null,"2"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"floor(n/2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"oor"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"/2"),n("span",{class:"mclose"},")")])])])])])]),n("li",null,[t("如 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"i"),n("mo",null,">"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"2i>n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.69862em","vertical-align":"-0.0391em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal"},"n")])])])]),t("，则该结点无左孩子结点; 如 2i<=n，则该结点"),n("strong",null,[t("左孩子结点为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"i")]),n("annotation",{encoding:"application/x-tex"},"2i")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.65952em","vertical-align":"0em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"i")])])])])])]),n("li",null,[t("如 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1"),n("mo",null,">"),n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"2i+1>n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.74285em","vertical-align":"-0.08333em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.68354em","vertical-align":"-0.0391em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},">"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),n("span",{class:"mord mathnormal"},"n")])])])]),t("，则该结点无右孩子结点; 如 2i+1<=n，则该结点"),n("strong",null,[t("右孩子结点为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mi",null,"i"),n("mo",null,"+"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2i+1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.74285em","vertical-align":"-0.08333em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222222222222222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.64444em","vertical-align":"0em"}}),n("span",{class:"mord"},"1")])])])])])])],-1),C=e('<h3 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构" aria-hidden="true">#</a> 存储结构</h3><h4 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构" aria-hidden="true">#</a> 顺序结构</h4><p>将二叉树填充空结点使其成为完全二叉树然后按序存储。</p><p>优点：索引快，可以在不支持链式存储的语言中实现</p><p>缺点：空间利用率低（存储完全二叉树时空间利用率高），动态增长时可能引起 resize，</p><blockquote><p>顺序结构时首元素建议为<code>A[1]</code>，否则不满足计算规律，计算父子元素地址较复杂</p></blockquote><h4 id="链式结构" tabindex="-1"><a class="header-anchor" href="#链式结构" aria-hidden="true">#</a> 链式结构</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>typedef struct Node {\n  DataType data;\n  struct Node * lchild;\n  struct Node * rchild;\n} Node，* Tree;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="遍历与线索化" tabindex="-1"><a class="header-anchor" href="#遍历与线索化" aria-hidden="true">#</a> 遍历与线索化</h3><ol><li>先序遍历：DLR</li><li>中序遍历：LDR</li><li>后序遍历：LDR</li></ol><h4 id="递归实现" tabindex="-1"><a class="header-anchor" href="#递归实现" aria-hidden="true">#</a> 递归实现</h4><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code>// 分治思想，复杂度O(n)\nvoid map(Tree root) {\n  if (root) {\n    // visit(); // 先序遍历\n    map(root-&gt;lchild);\n    // visit(); // 中序遍历\n    map(root-&gt;rchild);\n    // visit(); // 后序遍历\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="遍历序列-二叉树" tabindex="-1"><a class="header-anchor" href="#遍历序列-二叉树" aria-hidden="true">#</a> 遍历序列 -&gt; 二叉树</h4><table><thead><tr><th>序列</th><th style="text-align:left;">能否确定唯一二叉树</th><th style="text-align:left;">其他</th></tr></thead><tbody><tr><td>先序 + 中序</td><td style="text-align:left;">是</td><td style="text-align:left;"></td></tr><tr><td>后序 + 中序</td><td style="text-align:left;">是</td><td style="text-align:left;"></td></tr><tr><td>先序 + 后序</td><td style="text-align:left;">否</td><td style="text-align:left;"></td></tr><tr><td>拓展先序序列</td><td style="text-align:left;">是</td><td style="text-align:left;">eg：AB.DF..G..C.E.H..</td></tr><tr><td>拓展中序序列</td><td style="text-align:left;">否</td><td style="text-align:left;"></td></tr><tr><td>拓展后序序列</td><td style="text-align:left;">否</td><td style="text-align:left;"></td></tr></tbody></table><h4 id="线索化" tabindex="-1"><a class="header-anchor" href="#线索化" aria-hidden="true">#</a> 线索化</h4><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>typedef enum {\n  Link,  // 指向子结点\n  Thread // 指向线索\n} PointerTag;\n\ntypedef struct BitNode {\n  DataType data;\n  struct BitNode *lchild，*rchild;\n  PointerTag  Ltag;\n  PointerTag  rtal;\n} BitNode，*BiTree;\n\nBiTree pre; // 指向刚刚访问过的结点\nvoid InThreading(BiTree p)\n{\n    if (p == null) return;\n    InThreading(p-&gt;lchild);\n    if (!p-&gt;lchild) {\n        p-&gt;ltag = Thread; // 前驱线索\n        p-&gt;lchild = pre;  // 左孩子指向前驱\n    }\n    if (!pre-&gt;rchild) {\n        pre-&gt;rtag = Thread; // 后继线索\n        pre-&gt;rchild = p;    // 前驱右孩子指向后继(当前结点p)\n    }\n    pre = p;\n    InThreading(p-&gt;rchild);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="森林-forest" tabindex="-1"><a class="header-anchor" href="#森林-forest" aria-hidden="true">#</a> 森林（Forest）</h2>',17),N=n("p",null,[t("森林是 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"m"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"≥"),n("mn",null,"0"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"m (m≥0)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),n("span",{class:"mrel"},"≥"),n("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"0"),n("span",{class:"mclose"},")")])])])]),t(" 棵互不相交的树的集合。任何一棵树，删除了根结点就变成了森林。")],-1),B=e('<h3 id="储存结构" tabindex="-1"><a class="header-anchor" href="#储存结构" aria-hidden="true">#</a> 储存结构</h3><h4 id="双亲表示法" tabindex="-1"><a class="header-anchor" href="#双亲表示法" aria-hidden="true">#</a> 双亲表示法</h4><ul><li>顺序表储存, 子节点 -&gt; 父节点</li><li>容易找到树根, 查找结点的孩子需要遍历整个数组</li></ul><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>typedef struct TNode {\n  Data data;\n  int parent;\n} TNode;\n\ntypedef struct {\n  TNode tree[MAX];\n  int nodenum;\n} ParentTree;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="孩子表示法" tabindex="-1"><a class="header-anchor" href="#孩子表示法" aria-hidden="true">#</a> 孩子表示法</h4><ul><li>顺序表储存, 把每个结点的孩子组成孩子链表</li><li>n 个结点由 n 个孩子链表(叶子结点为空链表), 而 n 个结点和 n 个孩子链表的头指针组成顺序表</li></ul><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>typedef struct ChildNode {\n  int child; // 该孩子结点在线性表位置\n  struct ChildNode * next;\n} ChildNode;\n\ntypedef struct {\n  Data data;\n  ChildNode * FirstChild;\n} DataNode;\n\ntypedef struct {\n  DataNode nodes[MAX]; // 顺序表\n  int root;\n  int num;\n} ChildTree;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="孩子兄弟表示法-树的二叉树表示法" tabindex="-1"><a class="header-anchor" href="#孩子兄弟表示法-树的二叉树表示法" aria-hidden="true">#</a> 孩子兄弟表示法 (树的二叉树表示法)</h4><div class="language-C ext-C line-numbers-mode"><pre class="language-C"><code>typedef struct CSNode {\n  Data data;\n  struct CSNode * FirstChild;\n  struct CSNode * Nextsibling;\n} CSNode, * CSTree;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="树、二叉树和森林" tabindex="-1"><a class="header-anchor" href="#树、二叉树和森林" aria-hidden="true">#</a> 树、二叉树和森林</h2><ul><li>三者可以相互转换且转换结果唯一</li><li>树 -&gt; 二叉树：根节点无右子树</li><li>森林 -&gt; 二叉树：根节点有右子树</li></ul><h3 id="tree-binary-tree" tabindex="-1"><a class="header-anchor" href="#tree-binary-tree" aria-hidden="true">#</a> Tree -&gt; Binary Tree</h3><ol><li>连接相邻兄弟结点</li><li>删去结点与除第一个孩子外的连线</li><li>适当旋转树后, 得到<strong>唯一且根节点无右子树</strong>的二叉树</li></ol><h3 id="forest-binary-tree" tabindex="-1"><a class="header-anchor" href="#forest-binary-tree" aria-hidden="true">#</a> Forest -&gt; Binary Tree</h3>',14),D=n("ol",null,[n("li",null,[t("每个树 -> 二叉树 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"{"),n("msub",null,[n("mi",null,"T"),n("mn",null,"1")]),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"T"),n("mn",null,"2")]),n("mo",{separator:"true"},","),n("msub",null,[n("mi",null,"T"),n("mn",null,"3")]),n("mo",null,"…"),n("mtext",null," "),n("mo",{stretchy:"false"},"}")]),n("annotation",{encoding:"application/x-tex"},"\\{T_1, T_2, T_3 \\dots \\}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"{"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"3")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mclose"},"}")])])])])]),n("li",null,[t("根节点左节点为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"T"),n("mn",null,"1")])]),n("annotation",{encoding:"application/x-tex"},"T_1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.83333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t(", 右节点为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"T"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"T_2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.83333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t(", "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msub",null,[n("mi",null,"T"),n("mn",null,"2")])]),n("annotation",{encoding:"application/x-tex"},"T_2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.83333em","vertical-align":"-0.15em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])])])])])]),t(" 的子节点树为 "),n("span",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"{"),n("msub",null,[n("mi",null,"T"),n("mn",null,"3")]),n("mo",null,"…"),n("mtext",null," "),n("mo",{stretchy:"false"},"}")]),n("annotation",{encoding:"application/x-tex"},"\\{ T_3 \\dots \\}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"{"),n("span",{class:"mord"},[n("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.30110799999999993em"}},[n("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.13889em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"3")])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.15em"}},[n("span")])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"minner"},"…"),n("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),n("span",{class:"mclose"},"}")])])])])])],-1),F=e('<h3 id="binary-tree-tree-forest" tabindex="-1"><a class="header-anchor" href="#binary-tree-tree-forest" aria-hidden="true">#</a> Binary Tree -&gt; Tree / Forest</h3><ol><li>若某节点为父节点的左子孩子, 则将其右孩子, 右孩子的右孩子...与该节点的父节点连接</li><li>删去所有结点与右子节点的连接</li></ol><h3 id="树-森林的遍历" tabindex="-1"><a class="header-anchor" href="#树-森林的遍历" aria-hidden="true">#</a> 树/森林的遍历</h3><h4 id="树的遍历" tabindex="-1"><a class="header-anchor" href="#树的遍历" aria-hidden="true">#</a> 树的遍历</h4><ul><li>先根遍历 &lt;==&gt; 转换后二叉树的前序遍历</li><li>后根遍历 &lt;==&gt; 转换后二叉树的中序遍历</li></ul><h4 id="森林的遍历" tabindex="-1"><a class="header-anchor" href="#森林的遍历" aria-hidden="true">#</a> 森林的遍历</h4><p>森林有先序/中序/后序遍历，与转换后二叉树完全相等</p>',7);i.render=function(n,t){return s(),a(l,null,[m,p,r,c,h,g,u,o,d,b,y,v,x,w,k,f,z,M,T,L,_,C,N,B,D,F],64)};export default i;
