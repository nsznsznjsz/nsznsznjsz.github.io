import{r as a,o as l,c as s,a as e,w as n,F as t,b as i,d as r}from"./app.cad05c30.js";const h={},m=e("h1",{id:"图",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#图","aria-hidden":"true"},"#"),i(" 图")],-1),d={class:"table-of-contents"},u=i("基本术语"),c=i("存储结构"),o=i("邻接矩阵表示法"),p=i("邻接表表示法 (图的数组表示法)"),g=i("十字链表"),f=i("邻接多重表"),x=i("遍历"),b=i("深度优先搜索 (Deep First Search)"),y=i("广度优先搜索 (Breadth First Search)"),k=i("最小生成树"),v=i("普里姆算法 (prim)"),w=i("克鲁斯卡尔算法 (kruskal)"),_=i("连通分量"),M=i("拓扑排序"),F=i("关键路径"),S=i("最短路径"),z=i("单源"),O=i("所有结点"),L=e("h2",{id:"基本术语",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基本术语","aria-hidden":"true"},"#"),i(" 基本术语")],-1),B=e("ul",null,[e("li",null,"完全图 (每个顶点之间都有边/弧连接)"),e("li",null,[i("稀疏图/稠密图: "),e("span",null,[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"n"),e("mi",null,"l"),e("mi",null,"o"),e("msub",null,[e("mi",null,"g"),e("mi",null,"n")])]),e("annotation",{encoding:"application/x-tex"},"n log_n")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),e("span",{class:"mord mathnormal"},"n"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),e("span",{class:"mord mathnormal"},"o"),e("span",{class:"mord"},[e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),e("span",{class:"msupsub"},[e("span",{class:"vlist-t vlist-t2"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.151392em"}},[e("span",{style:{top:"-2.5500000000000003em","margin-left":"-0.03588em","margin-right":"0.05em"}},[e("span",{class:"pstrut",style:{height:"2.7em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mathnormal mtight"},"n")])])]),e("span",{class:"vlist-s"},"​")]),e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.15em"}},[e("span")])])])])])])])])])]),e("li",null,"度 (v 相关联边数), 出度/入度"),e("li",null,"权 -> 网"),e("li",null,"路径/回路(环), 简单路径: 无重复顶点"),e("li",null,"连通图")],-1),D=r('<h2 id="存储结构" tabindex="-1"><a class="header-anchor" href="#存储结构" aria-hidden="true">#</a> 存储结构</h2><h3 id="邻接矩阵表示法" tabindex="-1"><a class="header-anchor" href="#邻接矩阵表示法" aria-hidden="true">#</a> 邻接矩阵表示法</h3><ul><li>那当然是一个矩阵咯</li><li>优点: 方便啊</li><li>缺点: 对稀疏图来说, 浪费空间</li></ul><h3 id="邻接表表示法-图的数组表示法" tabindex="-1"><a class="header-anchor" href="#邻接表表示法-图的数组表示法" aria-hidden="true">#</a> 邻接表表示法 (图的数组表示法)</h3><ul><li>数组储存顶点, 链表储存弧</li></ul><h3 id="十字链表" tabindex="-1"><a class="header-anchor" href="#十字链表" aria-hidden="true">#</a> 十字链表</h3><h3 id="邻接多重表" tabindex="-1"><a class="header-anchor" href="#邻接多重表" aria-hidden="true">#</a> 邻接多重表</h3><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><p>visited[]</p><h3 id="深度优先搜索-deep-first-search" tabindex="-1"><a class="header-anchor" href="#深度优先搜索-deep-first-search" aria-hidden="true">#</a> 深度优先搜索 (Deep First Search)</h3><p>pre[]; // =&gt; 记录前驱结点, 同时充当 visited Stack stack;</p><h3 id="广度优先搜索-breadth-first-search" tabindex="-1"><a class="header-anchor" href="#广度优先搜索-breadth-first-search" aria-hidden="true">#</a> 广度优先搜索 (Breadth First Search)</h3><p>pre[]; Query query;</p><h2 id="最小生成树" tabindex="-1"><a class="header-anchor" href="#最小生成树" aria-hidden="true">#</a> 最小生成树</h2><p>生成树:</p><ul><li>DFS -&gt; 深度优先生成树</li><li>BFS -&gt; 广度优先生成树</li></ul><p>最小生成树:</p><ul><li>一副连通加权无向图中一棵权值最小的生成树</li></ul><h3 id="普里姆算法-prim" tabindex="-1"><a class="header-anchor" href="#普里姆算法-prim" aria-hidden="true">#</a> 普里姆算法 (prim)</h3><ol><li>任选起点</li><li>选择权值最小且连接已选结点与未选结点的边加入树</li><li>重复步骤 2</li></ol>',20),j=e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"存储结构"),e("th",null,"复杂度")])]),e("tbody",null,[e("tr",null,[e("td",null,"邻接矩阵"),e("td",null,[e("span",null,[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("msup",null,[e("mi",null,"v"),e("mn",null,"2")]),e("mo",{stretchy:"false"},")")]),e("annotation",{encoding:"application/x-tex"},"O(v^2)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1.064108em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),e("span",{class:"mopen"},"("),e("span",{class:"mord"},[e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),e("span",{class:"msupsub"},[e("span",{class:"vlist-t"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.8141079999999999em"}},[e("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{class:"pstrut",style:{height:"2.7em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},"2")])])])])])])]),e("span",{class:"mclose"},")")])])])])])]),e("tr",null,[e("td",null,"邻接表"),e("td",null,[e("span",null,[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"O"),e("mo",{stretchy:"false"},"("),e("mi",null,"e"),e("mtext",null," "),e("mi",null,"l"),e("mi",null,"o"),e("mi",null,"g"),e("mtext",null," "),e("mi",null,"v"),e("mo",{stretchy:"false"},")")]),e("annotation",{encoding:"application/x-tex"},"O(e\\ log\\ v)")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),e("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),e("span",{class:"mopen"},"("),e("span",{class:"mord mathnormal"},"e"),e("span",{class:"mspace"}," "),e("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),e("span",{class:"mord mathnormal"},"o"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),e("span",{class:"mspace"}," "),e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),e("span",{class:"mclose"},")")])])])])])])])],-1),q=e("h3",{id:"克鲁斯卡尔算法-kruskal",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#克鲁斯卡尔算法-kruskal","aria-hidden":"true"},"#"),i(" 克鲁斯卡尔算法 (kruskal)")],-1),Q=e("ol",null,[e("li",null,"边按权重 小->大 排序"),e("li",null,"选取权值最小且连接不处于同一连接分量的两结点的边加入树"),e("li",null,"重复步骤 2")],-1),R=e("p",null,[i("复杂度: "),e("span",null,[e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mi",null,"e"),e("mtext",null," "),e("mi",null,"l"),e("mi",null,"o"),e("mi",null,"g"),e("mtext",null," "),e("mi",null,"e")]),e("annotation",{encoding:"application/x-tex"},"e\\ log\\ e")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),e("span",{class:"mord mathnormal"},"e"),e("span",{class:"mspace"}," "),e("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),e("span",{class:"mord mathnormal"},"o"),e("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),e("span",{class:"mspace"}," "),e("span",{class:"mord mathnormal"},"e")])])])])],-1),A=r('<p>并查集</p><h2 id="连通分量" tabindex="-1"><a class="header-anchor" href="#连通分量" aria-hidden="true">#</a> 连通分量</h2><h2 id="拓扑排序" tabindex="-1"><a class="header-anchor" href="#拓扑排序" aria-hidden="true">#</a> 拓扑排序</h2><h2 id="关键路径" tabindex="-1"><a class="header-anchor" href="#关键路径" aria-hidden="true">#</a> 关键路径</h2><h2 id="最短路径" tabindex="-1"><a class="header-anchor" href="#最短路径" aria-hidden="true">#</a> 最短路径</h2><h3 id="单源" tabindex="-1"><a class="header-anchor" href="#单源" aria-hidden="true">#</a> 单源</h3><h3 id="所有结点" tabindex="-1"><a class="header-anchor" href="#所有结点" aria-hidden="true">#</a> 所有结点</h3>',7);h.render=function(i,r){const h=a("RouterLink");return l(),s(t,null,[m,e("nav",d,[e("ul",null,[e("li",null,[e(h,{to:"#基本术语"},{default:n((()=>[u])),_:1})]),e("li",null,[e(h,{to:"#存储结构"},{default:n((()=>[c])),_:1}),e("ul",null,[e("li",null,[e(h,{to:"#邻接矩阵表示法"},{default:n((()=>[o])),_:1})]),e("li",null,[e(h,{to:"#邻接表表示法-图的数组表示法"},{default:n((()=>[p])),_:1})]),e("li",null,[e(h,{to:"#十字链表"},{default:n((()=>[g])),_:1})]),e("li",null,[e(h,{to:"#邻接多重表"},{default:n((()=>[f])),_:1})])])]),e("li",null,[e(h,{to:"#遍历"},{default:n((()=>[x])),_:1}),e("ul",null,[e("li",null,[e(h,{to:"#深度优先搜索-deep-first-search"},{default:n((()=>[b])),_:1})]),e("li",null,[e(h,{to:"#广度优先搜索-breadth-first-search"},{default:n((()=>[y])),_:1})])])]),e("li",null,[e(h,{to:"#最小生成树"},{default:n((()=>[k])),_:1}),e("ul",null,[e("li",null,[e(h,{to:"#普里姆算法-prim"},{default:n((()=>[v])),_:1})]),e("li",null,[e(h,{to:"#克鲁斯卡尔算法-kruskal"},{default:n((()=>[w])),_:1})])])]),e("li",null,[e(h,{to:"#连通分量"},{default:n((()=>[_])),_:1})]),e("li",null,[e(h,{to:"#拓扑排序"},{default:n((()=>[M])),_:1})]),e("li",null,[e(h,{to:"#关键路径"},{default:n((()=>[F])),_:1})]),e("li",null,[e(h,{to:"#最短路径"},{default:n((()=>[S])),_:1}),e("ul",null,[e("li",null,[e(h,{to:"#单源"},{default:n((()=>[z])),_:1})]),e("li",null,[e(h,{to:"#所有结点"},{default:n((()=>[O])),_:1})])])])])]),L,B,D,j,q,Q,R,A],64)};export default h;
